// =====================================================================================================================
// These tests were generated by GitHub Copilot Agent by using the Playwright MCP tool to explore the website and API
// and then writing tests based on the observed behavior.
// =====================================================================================================================

import { test, expect } from '@playwright/test';

test.describe('PW MCP Generated DadABase Website Tests', () => {
  test.beforeEach(async ({ page, baseURL }) => {
    await page.goto(`${baseURL}`);
  });

  test.describe('Home Page', () => {
    test('should display the main heading and initial joke', async ({ page, baseURL }) => {
      // Verify page title
      await expect(page).toHaveTitle('The Dad-A-Base');
      
      // Verify main heading is visible
      await expect(page.getByRole('heading', { name: 'Tell me a Joke, Dad!' })).toBeVisible();
      
      // Verify initial joke is displayed (could be any category)
      await expect(page.locator('main ul li')).toBeVisible();
      
      // Verify "Tell me another one!" button is visible and clickable
      await expect(page.getByRole('button', { name: 'Tell me another one!' })).toBeVisible();
      
      // Verify elapsed time display
      await expect(page.locator('text=Joke Elapsed:')).toBeVisible();
    });

    test('should load a new joke when "Tell me another one!" button is clicked', async ({ page, baseURL }) => {
      // Get the initial joke text
      const initialJoke = await page.locator('main ul li').first().textContent();
      
      // Click the "Tell me another one!" button
      await page.getByRole('button', { name: 'Tell me another one!' }).click();
      
      // Wait for new joke to load and verify it changed
      await page.waitForTimeout(1000); // Give time for the joke to update
      const newJoke = await page.locator('main ul li').first().textContent();
      
      // Verify the joke content changed
      expect(newJoke).not.toBe(initialJoke);
      
      // Verify a joke is still displayed
      await expect(page.locator('main ul li')).toBeVisible();
    });

    test('should have working navigation links', async ({ page, baseURL }) => {
      // Verify all navigation links are present
      await expect(page.getByRole('link', { name: 'Home' })).toBeVisible();
      await expect(page.getByRole('link', { name: 'Search' })).toBeVisible();
      await expect(page.getByRole('link', { name: 'About' })).toBeVisible();
      
      // Verify logo link
      await expect(page.getByRole('link', { name: 'Logo' })).toBeVisible();
    });
  });

  test.describe('Search Functionality', () => {
    test('should navigate to search page and display search form', async ({ page, baseURL }) => {
      // Navigate to search page
      await page.getByRole('link', { name: 'Search' }).click();
      
      // Verify URL and title
      await expect(page).toHaveURL(`${baseURL}/Search`);
      await expect(page).toHaveTitle('Search');
      
      // Verify search form elements
      await expect(page.getByRole('heading', { name: 'Search the Dad-A-Base' })).toBeVisible();
      await expect(page.locator('#inputText')).toBeVisible();
      await expect(page.getByRole('combobox')).toBeVisible();
      await expect(page.getByRole('button', { name: 'Search' })).toBeVisible();
      
      // Verify default category selection
      await expect(page.getByRole('combobox')).toHaveValue('ALL');
    });

    test('should perform text search and return results', async ({ page, baseURL }) => {
      // Navigate to search page
      await page.getByRole('link', { name: 'Search' }).click();
      
      // Enter search term
      await page.locator('#inputText').fill('dad');
      
      // Click search button
      await page.getByRole('button', { name: 'Search' }).click();
      
      // Wait for results to load
      await page.waitForTimeout(3000);
      
      // Check if any results are visible - some searches might return no results
      const searchResults = page.locator('main ul li');
      const resultsCount = await searchResults.count();
      
      if (resultsCount > 0) {
        // Verify at least the first result is visible
        await expect(searchResults.first()).toBeVisible();
      }
    });

    test('should show category dropdown options', async ({ page, baseURL }) => {
      // Navigate to search page
      await page.getByRole('link', { name: 'Search' }).click();
      
      // Verify combobox exists
      await expect(page.getByRole('combobox')).toBeVisible();
      
      // Verify the combobox has the default value
      await expect(page.getByRole('combobox')).toHaveValue('ALL');
    });

    test('should perform category-specific search', async ({ page, baseURL }) => {
      // Navigate to search page
      await page.getByRole('link', { name: 'Search' }).click();
      
      // Select "Dad" category
      await page.getByRole('combobox').selectOption('Dad');
      
      // Click search button
      await page.getByRole('button', { name: 'Search' }).click();
      
      // Wait for results to load
      await page.waitForTimeout(3000);
      
      // Check if results are displayed
      const searchResults = page.locator('main ul li');
      const resultsCount = await searchResults.count();
      
      if (resultsCount > 0) {
        // Verify at least one result is visible
        await expect(searchResults.first()).toBeVisible();
      }
    });
  });

  test.describe('About Page', () => {
    test('should display about page content', async ({ page, baseURL }) => {
      // Navigate to about page
      await page.getByRole('link', { name: 'About' }).click();
      
      // Verify URL and title
      await expect(page).toHaveURL(`${baseURL}/About`);
      await expect(page).toHaveTitle('About');
      
      // Verify about page content
      await expect(page.getByRole('heading', { name: 'About' })).toBeVisible();
      await expect(page.getByRole('heading', { name: 'Where does a dad store all his dad jokes?' })).toBeVisible();
      await expect(page.getByRole('heading', { name: 'In the Dad-A-Base, of course!' })).toBeVisible();
    });
  });

  test.describe('Footer and External Links', () => {
    test('should display footer information', async ({ page, baseURL }) => {
      // Verify copyright text
      await expect(page.getByText('Copyright ')).toBeVisible();
      
      // Verify version information
      await expect(page.getByText('Version ')).toBeVisible();
      
      // Verify external links are present (without clicking them)
      await expect(page.getByRole('link', { name: 'Privacy' })).toBeVisible();
      await expect(page.getByRole('link', { name: 'License' })).toBeVisible();
      
      // Verify external links have correct URLs
      await expect(page.getByRole('link', { name: 'Privacy' })).toHaveAttribute('href', 'http://www.luppes.com/Privacy');
      await expect(page.getByRole('link', { name: 'License' })).toHaveAttribute('href', 'http://www.luppes.com/License');
    });
  });

  test.describe('Responsive Design and Accessibility', () => {
    test('should be accessible and responsive', async ({ page, baseURL }) => {
      // Verify main landmarks
      await expect(page.locator('main')).toBeVisible();
      
      // Verify heading hierarchy
      await expect(page.locator('h1')).toBeVisible();
      
      // Test mobile viewport
      await page.setViewportSize({ width: 375, height: 667 });
      await expect(page.getByRole('heading', { name: 'Tell me a Joke, Dad!' })).toBeVisible();
      await expect(page.getByRole('button', { name: 'Tell me another one!' })).toBeVisible();
      
      // Test tablet viewport
      await page.setViewportSize({ width: 768, height: 1024 });
      await expect(page.getByRole('heading', { name: 'Tell me a Joke, Dad!' })).toBeVisible();
      
      // Reset to desktop
      await page.setViewportSize({ width: 1280, height: 720 });
    });
  });
});
